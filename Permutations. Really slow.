#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

long long factorial(int x) {

	long long prod = 1;

	for (int i = 1; i <= x; i++) {

		prod = prod * i;
	}

	return prod;

}

long long sizeRepeats(string x) {

	vector<char> vec;
	vector<char> check;
	vector<int> reps;
	int rep;

	for (int j = 0; j < x.length(); j++) {
		vec.push_back(x[j]);
	}

	sort(vec.begin(), vec.end());

	for (int i = 0; i < x.length(); i++) {

		rep = 0;

		rep = count(vec.begin(), vec.end(), vec[i]);

		if (binary_search(check.begin(), check.end(), vec[i]) == false) {

			check.push_back(vec[i]);

			if (rep > 1) {

				reps.push_back(rep);

			}
		}

	}

	long long c = 1;

	if (reps.size() == 0) {
		c = factorial(x.length());
	}

	for (int i = 0; i < reps.size(); i++) {

		c = factorial(x.length()) / factorial(reps[i]);

	}

	return c;

}

bool isFound(string x, vector<string> vec) {

	sort(vec.begin(), vec.end());

	bool found = binary_search(vec.begin(), vec.end(), x);

	return found;

}

string reverse(string x) {

	string y;

	for (int i = x.length() - 1; i >= 0; i--) {

		y += x[i];
	}

	return y;

}

vector<string> mumble(string x, vector<string> vec) {

	int l = x.length();
	long long fact = sizeRepeats(x);
	string a = x;
	string b = x;
	int counter = 0;

	while (counter != l - 1) {

		b[0] = a[l - 1];

		for (int i = 1; i < l; i++) {

			b[i] = a[i - 1];

		}

		if (isFound(b, vec) == false) {
			vec.push_back(b);
			if (vec.size() == fact) {
				return vec;
			}
		}

		a = b;

		counter++;
	}

	return vec;

}

vector<string> jumble(string x, vector<string> vec) {

	string a = x;
	int l = x.length();
	int counter = 0;
	int tracker = 0;
	char t;
	long long fact = sizeRepeats(x);

	for (int i = counter;; i++) {

		if (vec.size() == fact) {
			return vec;
		}

		if (tracker == l - 1) {
			a = x;
			counter++;
			i = counter;
			tracker = 0;
		}
		if (counter == l) {
			break;
		}

		if (i + 1 != l) {

			t = a[i];
			a[i] = a[i + 1];
			a[i + 1] = t;

			tracker++;
			if (isFound(a, vec) == false) {
				vec.push_back(a);
			}

		}

		if (i + 1 == l) {

			t = a[i];
			a[i] = a[0];
			a[0] = t;

			tracker++;
			if (isFound(a, vec) == false) {
				vec.push_back(a);
			}
			i = 0;

		}

	}

	return vec;

}

int main() {

	vector<string> vec;
	vector<string> buff;
	string in;
	cin >> in;
	string rin = reverse(in);

	vec = jumble(in, vec);

	long long fact = sizeRepeats(rin);

	for (int i = 0; i < vec.size(); i++) {

		if (vec.size() == fact) {
			break;
		}
		vec = mumble(vec[i], vec);

	}

	for (int i = 0; i < vec.size(); i++) {

		if (vec.size() == fact) {
			break;
		}

		vec = jumble(vec[i], vec);

	}


	cout << "There are " << vec.size()
			<< " permutations. Would you like to see them all? (Y/N)" << endl;

	char choice;
	cin >> choice;
	cout << endl;

	if (choice == 'Y') {
		for (string i : vec) {
			cout << i << endl;
		}
	}
	if (choice == 'N') {
		cout << "Lame";
	}

	return 0;
}
